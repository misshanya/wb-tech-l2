// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package event

import (
	"github.com/misshanya/wb-tech-l2/18/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// newMockrepo creates a new instance of mockrepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockrepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockrepo {
	mock := &mockrepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockrepo is an autogenerated mock type for the repo type
type mockrepo struct {
	mock.Mock
}

type mockrepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockrepo) EXPECT() *mockrepo_Expecter {
	return &mockrepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type mockrepo
func (_mock *mockrepo) Create(e *models.Event) *models.Event {
	ret := _mock.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Event
	if returnFunc, ok := ret.Get(0).(func(*models.Event) *models.Event); ok {
		r0 = returnFunc(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}
	return r0
}

// mockrepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockrepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - e *models.Event
func (_e *mockrepo_Expecter) Create(e interface{}) *mockrepo_Create_Call {
	return &mockrepo_Create_Call{Call: _e.mock.On("Create", e)}
}

func (_c *mockrepo_Create_Call) Run(run func(e *models.Event)) *mockrepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Event
		if args[0] != nil {
			arg0 = args[0].(*models.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockrepo_Create_Call) Return(event *models.Event) *mockrepo_Create_Call {
	_c.Call.Return(event)
	return _c
}

func (_c *mockrepo_Create_Call) RunAndReturn(run func(e *models.Event) *models.Event) *mockrepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type mockrepo
func (_mock *mockrepo) Delete(id int) {
	_mock.Called(id)
	return
}

// mockrepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockrepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *mockrepo_Expecter) Delete(id interface{}) *mockrepo_Delete_Call {
	return &mockrepo_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *mockrepo_Delete_Call) Run(run func(id int)) *mockrepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockrepo_Delete_Call) Return() *mockrepo_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockrepo_Delete_Call) RunAndReturn(run func(id int)) *mockrepo_Delete_Call {
	_c.Run(run)
	return _c
}

// GetAll provides a mock function for the type mockrepo
func (_mock *mockrepo) GetAll() []*models.Event {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Event
	if returnFunc, ok := ret.Get(0).(func() []*models.Event); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Event)
		}
	}
	return r0
}

// mockrepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type mockrepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *mockrepo_Expecter) GetAll() *mockrepo_GetAll_Call {
	return &mockrepo_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *mockrepo_GetAll_Call) Run(run func()) *mockrepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockrepo_GetAll_Call) Return(events []*models.Event) *mockrepo_GetAll_Call {
	_c.Call.Return(events)
	return _c
}

func (_c *mockrepo_GetAll_Call) RunAndReturn(run func() []*models.Event) *mockrepo_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type mockrepo
func (_mock *mockrepo) Update(e *models.Event) error {
	ret := _mock.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Event) error); ok {
		r0 = returnFunc(e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockrepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockrepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - e *models.Event
func (_e *mockrepo_Expecter) Update(e interface{}) *mockrepo_Update_Call {
	return &mockrepo_Update_Call{Call: _e.mock.On("Update", e)}
}

func (_c *mockrepo_Update_Call) Run(run func(e *models.Event)) *mockrepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Event
		if args[0] != nil {
			arg0 = args[0].(*models.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockrepo_Update_Call) Return(err error) *mockrepo_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockrepo_Update_Call) RunAndReturn(run func(e *models.Event) error) *mockrepo_Update_Call {
	_c.Call.Return(run)
	return _c
}
